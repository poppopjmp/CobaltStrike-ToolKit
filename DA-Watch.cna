# Improved Domain Admin Tracking Script

global('@domain_admins');
global('$listening');
@domain_admins = @("administrator", "jay"); # Initial DA list
$listening = 1; # Enable beacon output parsing by default

# Function to add a Domain Admin
sub addDA(username) {
    if (username !in @domain_admins) {
        add(@domain_admins, username);
        println("[+] Added #{username} to Domain Admins");
    } else {
        println("[-] #{username} is already in Domain Admins");
    }
}

# Function to remove a Domain Admin
sub removeDA(username) {
    if (username in @domain_admins) {
        @rem = @(username);
        @domain_admins = removeAll(@domain_admins, @rem);
        println("[-] Removed #{username} from Domain Admins");
    } else {
        println("[-] #{username} is not in Domain Admins");
    }
}

# Function to check if a beacon's user is a Domain Admin
sub checkDA(user, pid) {
    user = replace(user, '\\s\\*$', ''); # Remove trailing " *"
    if (user in @domain_admins) {
        elog("[+] Beacon with DA #{user} in PID: #{pid}");
    }
}

# Function to parse Domain Admin output
sub parseDA(output) {
    @lines = split('\n', output);
    @usernames = @(); # Initialize an empty array for usernames

    foreach (line in @lines) {
        line = trim(line); # Remove leading/trailing whitespace
        if (line =~ /Members\s+--------/) {
            # Start extracting usernames after "Members --------"
            @parts = split('\s+', line);
            shift(@parts, 2); # Remove "Members" and "--------"
            foreach (u in @parts){
               if(u != ""){
                   add(@usernames, u);
               }
            }
        }
    }
    foreach (username in @usernames) {
        addDA(username);
    }
}

# Command to add a Domain Admin
command uaddDA(username) {
    addDA(username);
}

# Command to remove a Domain Admin
command uremDA(username) {
    removeDA(username);
}

# Command to list Domain Admins
command ulistDA() {
    printAll(@domain_admins);
}

# Command to show hook status
command uhookStatus() {
    if ($listening) {
        println("[+] Beacon output parsing is enabled.");
    } else {
        println("[-] Beacon output parsing is disabled.");
    }
}

# Command to enable hook
command uhookOn() {
    $listening = 1;
    uhookStatus();
}

# Command to disable hook
command uhookOff() {
    $listening = 0;
    uhookStatus();
}

# Event handler for initial beacon check-in
on beacon_initial(bid) {
    user = beacon_info(bid, "user");
    pid = beacon_info(bid, "pid");
    checkDA(user, pid);
}

# Event handler for captured credentials
on credentials(creds) {
    @unames = map(creds, { return $['user']; }); # Extract usernames
    foreach (da in @domain_admins) {
        if (da in @unames) {
            println("[+] Credentials store has DA #{da}");
        }
    }
}

# Event handler for beacon output
on beacon_output(bid, output) {
    if ($listening) {
        if (output =~ /Group name\s+Domain Admins/ && output =~ /The command completed successfully./) {
            parseDA(output);
        }
    }
}

# Function trim
sub trim(s){
    return replace(s, '^\\s+|\\s+$', '');
}
